#+TITLE:     Shell Tricks
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/article.css" />
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/toc.css" />
#+OPTIONS:   ^:nil
#+TAGS:      awk(a) bash(b) curl(c) diff(d) find(f) grep(g) network(n) rsync(r) sed(s) ssh(h) sort(t) others(o)
#+INDEX:     shell
#+INDEX:     bash

* one-liners
** convert decimal to hexadecimal                                    :others:
#+BEGIN_SRC sh
  echo "obase=16; 1234" | bc
  # or convert file of integers
  (echo "obase=16" ; cat file_with_integers.txt) | bc
  # or with printf
  printf "%x\n" 1234
#+END_SRC

** compare folders                                                     :diff:
#+BEGIN_SRC sh
  diff --brief --exclude='.git' -r <dir1> <dir2>
#+END_SRC

** compare binary files
*** hashing
#+BEGIN_SRC sh
  diff <(sha256sum bin_file_1) <(sha256sum bin_file_2)
#+END_SRC
*** cmp
#+BEGIN_SRC sh
  cmp bin_file_1 bin_file_2
#+END_SRC
*** hexdump
#+BEGIN_SRC sh
  diff <(hexdump bin_file_1) <(hexdump bin_file_2)
#+END_SRC

** find files in current directory, without subdirectories             :find:
#+BEGIN_SRC sh
find . -maxdepth 1
#+END_SRC

** find not matching files                                             :find:
#+BEGIN_SRC sh
find . -not -name '*.tar.gz'
#+END_SRC
or simply
#+BEGIN_SRC sh
find . ! -name '*.tar.gz'
#+END_SRC

** find C/C++ files that not in folder =tests=                           :find:
#+BEGIN_SRC sh
find -iregex '.*\.[ch][pp]*' -and -not -path '*/tests/*'
#+END_SRC

** find C/C++ files without =tests= and =tools=                            :find:

#+BEGIN_SRC sh
find -iregex '.*\.[ch][pp]*' -and -not -path '*/tests/*' -and -not -path '*/tools/*'
#+END_SRC

   For example, I'm working on Android Runtime (ART), and I want a tag file that doesn't include
   architecture dependent code such as ARM, MIPS, and X86_64, also no test code, so I can do this:

#+BEGIN_SRC sh
find -iregex '.*\.[ch]+' -and -not -path '*test*' -and -not -path '*mips*' -and -not -path '*arm*' -and -not -path '*x86_64*' | xargs ctags -e
#+END_SRC

   It's boring to do an exhausted list of unwanted folders, but it works well so far.

** change mode of files with whitespaces in filename                   :find:
#+BEGIN_SRC sh
  find ~/Videos/ -type f | xargs -d '\n' chmod 644
#+END_SRC

** grep only c++ files in a folder                                     :grep:

#+BEGIN_SRC sh
grep -rnI --include=\*.{h,cpp} 'pattern'
#+END_SRC

** grep only java files in a folder and it's sub folders               :grep:
#+BEGIN_SRC sh
 find . -name .repo -prune -o -name .git -prune -o -name out -prune -o -type f -name "*\.java" -print0 | xargs -0 grep --color -n "$@"
#+END_SRC

** cast grep result for vim                                        :grep:sed:
   Vim takes parameter =+n= after file name to go to line number =n= directly
   after open the file. To use result of grep with line number:
#+BEGIN_SRC sh
  grep -rn <pattern> <folder> | sed 's/:\([0-9]*\):.*/ \+\1/'
#+END_SRC
   The =-r= option of sed[fn:sed] enables extended regular expressions, you can do it
   this way to be more precise with using =+= to indicate that the line number
   exists.
#+BEGIN_SRC sh
  grep -rn <pattern> <folder> | sed -r 's/:([0-9]+):.*/ \+\1/'
#+END_SRC

** average a column                                                     :awk:
#+BEGIN_SRC sh
cat file | awk '{ sum+=$N } END { print "average = ", sum/NR }'
#+END_SRC

** Print all columns but the very first one                             :awk:
#+BEGIN_SRC sh
cat file | awk '{ $1=""; print $0 }'
#+END_SRC

** Print a column in a row                                              :awk:
#+BEGIN_SRC sh
cat file | awk 'BEGIN { ORS = " " } { print $1 }'
#+END_SRC

** Replace top dir of a list of files                                   :awk:
#+BEGIN_SRC sh
  cat file | awk -F '/' 'BEGIN {OFS="/"} {$1="$TOP"; print $0}'
#+END_SRC

** Match lines with hex number                                          :awk:
#+BEGIN_SRC python
  foo = {
      0x00 : ["vendor_id",             2, {} ],
      0x02 : ["device_id",             2, {} ],
      ...
  }

  bar = {
      0x28 : ["cardbus_cis_ptr",       4, {} ],
      0x2C : ["subsystem_vendor_id",   2, {} ],
      0x2E : ["subsystem_id",          2, {} ],
      0x30 : ["expansion_rom_base",    4, {} ],
      ...
  }

  blabla = {
      0x18 : ["primary_bus_number",            1, {} ],
      0x19 : ["secondary_bus_number",          1, {} ],
      0x1A : ["subordinate_bus_number",        1, {} ],
      0x1B : ["secondary_latency_timer",       1, {} ],
      ...
  }
#+END_SRC
   You can list all addessed with =awk=
#+BEGIN_SRC sh
  awk ' /$1 ~ 0x[0-9a-fA-F]+/ { print $1, $4 } ' file
#+END_SRC
** Trim whitespaces within awk                                          :awk:
#+BEGIN_SRC sh
  awk '{gsub(/ /, "", $2); print $2}' file.txt
#+END_SRC

** Remove duplicated lines from files (not perfect)                    :sort:
#+BEGIN_SRC sh
cat [files] | sort | uniq
#+END_SRC

** List 10 biggest files in current folder                             :sort:
#+BEGIN_SRC sh
du -s * | sort -rg | head
#+END_SRC

** List top 10 RAM user                                                :sort:
#+BEGIN_SRC sh
ps aux | sort -rgk +4 | head
#+END_SRC

** Check if string 'Finish: success' exists in log                      :sed:
#+BEGIN_SRC sh
tail -f /path/to/log | sed '/^Finish success$/q'
#+END_SRC

** Remove lines of multiple files with a pattern                        :sed:
#+BEGIN_SRC sh
sed -i '/pattern/d' files
#+END_SRC

** Remove trailing whitespaces and empty lines                          :sed:
#+BEGIN_SRC sh
sed -i -e 's/[ ^I]*$//' -e '/^$/ d' files
#+END_SRC
   This command takes care of _lines contain only whitespaces_ by removing
   whitespaces then empty line.

** Run command on remote machine                                        :ssh:
#+BEGIN_SRC sh
  ssh user@host '<CMD>'
#+END_SRC

** Run script on remote machine without copy file                       :ssh:
#+BEGIN_SRC sh
  ssh user@host bash < /path/to/local/script
#+END_SRC

** deploy ssh identity to remote device                                 :ssh:
#+BEGIN_SRC sh
  ssh-copy-id -i <idfile.pub> user@remote-machcine
#+END_SRC
   If the identity file is not the default one, you'll have to declare it in =~/.ssh/config=.
#+BEGIN_SRC sh
  Host <nickname>
    HostName <domain name or ip address>
    User username
    IdentityFile ~/.ssh/you_file
#+END_SRC

** Create a detached SSH connection                                     :ssh:
#+BEGIN_SRC sh
  screen -d -m -S svr1 -t user@server ssh user@server
#+END_SRC
   Where '-d -m' start a new session and detach from it. '-S' set the session name, and '-t' set the title of terminal.
   then you can attach to it later with
#+BEGIN_SRC sh
screen -r svr1
#+END_SRC

   To detach it again, input 'C-a C-d'.

** Create a SSH tunnel                                                  :ssh:
#+BEGIN_SRC sh
  ssh -f -N -L 6667:localhost:6667 server.example.com
#+END_SRC

** Indent one-line XML file                                          :others:
   First, create indent style sheet as =indent.xsl=.
#+BEGIN_SRC xml
  <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
   <xsl:output method="xml" indent="yes"/>
   <xsl:strip-space elements="*"/>
   <xsl:template match="/">
    <xsl:copy-of select="."/>
   </xsl:template>
  </xsl:stylesheet>
#+END_SRC
   Then use xml transformat tool.
#+BEGIN_SRC sh
  $ xsltproc indent.xsl origin.xml > indented.xml
#+END_SRC
** Post JSON data                                                      :curl:
#+BEGIN_SRC bash
$ curl -X POST -H 'Content-Type: application/json' -d '{"key":"value"}' http://domain/upload
#+END_SRC

** Post files                                                          :curl:
#+BEGIN_SRC bash
curl -X POST -F 'image=@/path/to/pictures/pic.jpg' http://docmain/upload
#+END_SRC

** Backup folder with filter                                          :rsync:
#+BEGIN_SRC bash
rsync -aP --exclude-from=blacklist.txt $HOME /path/to/home_backup
rsync -aP --include-from=whitelist.txt $HOME /path/to/home_backup
#+END_SRC

** Who has logged in recently                                       :network:
#+BEGIN_SRC bash
last | head
# or
lastlog
#+END_SRC

** Has a user logged in recently                                    :network:
#+BEGIN_SRC bash
last <user> | head
# or
lastlog -u <user>
#+END_SRC

#+BEGIN_SRC bash
grep -i "new session" /var/log/auth.log
#+END_SRC

** Monitoring outgoing connections on port 22                       :network:
#+BEGIN_SRC bash
watch -n1 lsof -i TCP:22
#+END_SRC

#+BEGIN_SRC bash
sudo iptables -A OUTPUT -p tcp --dport 22 -j LOG --log-prefix '[output@tcp:22] '
#+END_SRC

** Get public IP address                                            :network:
#+BEGIN_SRC bash
  curl ip.sb # or ifconfig.me
#+END_SRC

* bash
** To run a script with current environment
#+BEGIN_SRC sh
. <script>
#+END_SRC

** Check if folder exists
#+BEGIN_SRC sh
  if [ -d /path/to/folder ]; then
      # code here
  fi
#+END_SRC

** Check string length
#+BEGIN_SRC sh
  # true if STRING length is 0
  if [ -z STRING ]; then
      # code here
  fi

  # true if STRING length is NOT 0
  if [ -n STRING ]; then
      # code here
  fi
#+END_SRC

** Check if a variable is defined
#+BEGIN_SRC sh
  if [ -z ${var+x} ]; then
      echo "var is unset";
  else
      echo "var is set to '$var'";
  fi
#+END_SRC

** On Bash variables
   To declare a variable in current bash context.
#+BEGIN_SRC sh
  VAR=abc
  echo $VAR
  #abc
#+END_SRC
   To declare a variable in current user environment.
#+BEGIN_SRC sh
  export VAR=abc
  env | grep VAR
  #VAR=abc
#+END_SRC
   To unset a variable
#+BEGIN_SRC sh
  unset VAR
#+END_SRC
   To reset environment variables.
#+BEGIN_SRC sh
  env -i bash
#+END_SRC

** Expressions used with if
| Primary    | Meaning                                             |
|------------+-----------------------------------------------------|
| =[ -a FILE]= | True if =FILE= exists                                 |
| =[ -b FILE]= | True if =FILE= exists and is a block special file     |
| =[ -c FILE]= | True if =FILE= exists and is a character special file |
| =[ -d FILE]= | True if =FILE= exists and is a directory              |
| =[ -e FILE]= | True if =FILE= exists                                 |
| =[ -f FILE]= | True if =FILE= exists and is a regular file           |
| =[ -g FILE]= | True if =FILE= exists and SGID bit is set             |
| =[ -h FILE]= | True if =FILE= exists and is a symbolic link          |

   see more [[http://www.tldp.org/LDP/Bash-Beginners-Guide/html/sect_07_01.html][here]].

** Check whether interactive
#+BEGIN_SRC sh
if [ -z $PS1 ]; then
    # non-interactive
else
    # interactive
fi
#+END_SRC
Or check '$-' flag
#+BEGIN_SRC sh
case $- in
    *i*)
        # interactive
    ;;
    *)
        # non-interactive
    ;;
esac
#+END_SRC

** Auto complete
   Check =/etc/bash_completion= and =/usr/share/bash-completion=
** Start editor (specified by $EDITOR)
#+BEGIN_SRC sh
ctrl-x e
#+END_SRC

** Run previous cmd as root
#+BEGIN_SRC sh
sudo !!
#+END_SRC

** Run a command N times
#+BEGIN_SRC sh
  for i in {1..$N}; do <CMD>; done
#+END_SRC
   or if you need to start from 0
#+BEGIN_SRC sh
  i=0
  while [ $i -lt $N ]
  do
      # command
      let i=i+1
  done
#+END_SRC

** Last argument of previous cmd
#+BEGIN_SRC sh
  touch very-loooooooooooooooooooooooong-file-name
  vi !$ # alt-. does the same
#+END_SRC

** Also last argument of previous cmd
#+BEGIN_SRC sh
alt+.
#+END_SRC

** /n/th argument of previous cmd
#+BEGIN_SRC sh
alt+n alt+.
#+END_SRC

** Create an empty file without using /touch/
#+BEGIN_SRC sh
>file.txt
#+END_SRC

** Replace string of previous cmd
#+BEGIN_SRC sh
^old^new
#+END_SRC
   this is equivalent to
#+BEGIN_SRC sh
!!:s/old/new/
#+END_SRC
   to replace all instances of 'old' in previous command
#+BEGIN_SRC sh
!!:gs/old/new/
#+END_SRC
   more details [[http://www.gnu.org/software/bash/manual/bashref.html#History-Interaction][here]].

** Handle file paths
   List directory find in last argument of previous cmd.
#+BEGIN_SRC sh
  ls $(dirname [alt+.])
#+END_SRC
   Get base name of last argument of previous cmd.
#+BEGIN_SRC sh
  echo $(basename [alt+.])
#+END_SRC

** Result of last cmd
#+BEGIN_SRC sh
echo $?
#+END_SRC

** =type= command
   To check definition of a command
#+BEGIN_SRC sh
type <command>
#+END_SRC

** Exit ssh without stopping a long-run-cmd
#+BEGIN_SRC sh
nohup <long-run-command> &
#+END_SRC

   Or you didn't see the command should be over-live the terminal.
#+BEGIN_SRC sh
<long-run-command>
# press ctrl-z
bg && disown
#+END_SRC

* String manipulation
** Get length of string
#+BEGIN_SRC sh
  string="hello world!"
  ${#string} # 12
#+END_SRC

** Get substring by position
#+BEGIN_SRC sh
  ${string:position}
  # or
  ${string:position:length}
#+END_SRC

** Match shortest substring
#+BEGIN_SRC sh
  # start from front
  ${string#substring}
  # start from back
  ${string%substring}
#+END_SRC

** Match longest substring
#+BEGIN_SRC sh
  # from front
  ${string##substring}
  # from back
  ${string%%substring}
#+END_SRC

** Replace substring
#+BEGIN_SRC sh
  # replace first match
  ${string/pattern/replace}
  # replace all matches
  ${string//pattern/replace}
  # replace only beginning
  ${string/#pattern/replace}
  # replace only ending
  ${string/%pattern/replace}
#+END_SRC

** Delete substring
#+BEGIN_SRC sh
  # remove prefix, match shortest
  ${string#pattern}
  # remove suffix, match shortest
  ${string%pattern}
  # remove prefix, match longest
  ${string##substring}
  # remove suffix, match longest
  ${string%%substring}
#+END_SRC

** Convert string to uppercase
#+BEGIN_SRC sh
  $(str^^)
  # or
  echo $str | tr [a-z] [A-Z]
  # or
  echo $str | awk '{print toupper($0)}'
#+END_SRC

* debugging
** Run shell script with *-x* option

#+BEGIN_SRC sh
bash -x script-name
#+END_SRC

** Use *set* builtin command
#+BEGIN_SRC sh
# noexec
set -n
# verbose
set -v
# turn on debug mode
set -x
for f in *
do
   file $f
done
# turn OFF debug mode
set +x
#+END_SRC

** Replace the standard shebang[fn:shebang] line
#+BEGIN_SRC sh
#!/bin/bash -xv
#+END_SRC


[fn:shebang] Explain of shebang on [[http://en.wikipedia.org/wiki/Shebang_(Unix)][Wikipedia]].
[fn:sed] There is a splendid tutorial of sed can be found [[http://www.grymoire.com/Unix/sed.html][here]].
