#+TITLE:     Shell Tricks
#+html_head: <link rel="stylesheet" type="text/css" href="../css/article.css" />
#+html_head: <link rel="stylesheet" type="text/css" href="../css/toc.css" />
#+options:   ^:nil
#+tags:      awk(a) bash(b) diff(d) find(f) grep(g) sed(s) ssh(h) sort(t) others(o) xargs(x)

* one-liners
** convert decimal to hexadecimal                                    :others:
#+begin_src sh
  echo "obase=16; 1234" | bc
  # or convert file of integers
  (echo "obase=16" ; cat file_with_integers.txt) | bc
  # or with printf
  printf "%x\n" 1234
#+end_src
** compare folders                                                     :diff:
#+begin_src sh
  diff --brief --exclude='.git' -r <dir1> <dir2>
#+end_src
** find files in current directory, without subdirectories             :find:
#+begin_src sh
find . -maxdepth 1
#+end_src

** find not matching files                                             :find:
#+begin_src sh
find . -not -name '*.tar.gz'
#+end_src
or simply
#+begin_src sh
find . ! -name '*.tar.gz'
#+end_src

** find C/C++ files that not in folder =tests=                         :find:
#+begin_src sh
find -iregex '.*\.[ch][pp]*' -and -not -path '*/tests/*'
#+end_src

** find C/C++ files without =tests= and =tools=                        :find:

#+begin_src sh
find -iregex '.*\.[ch][pp]*' -and -not -path '*/tests/*' -and -not -path '*/tools/*'
#+end_src

   For example, I'm working on Android Runtime (ART), and I want a tag file that doesn't include
   architecture dependent code such as ARM, MIPS, and X86_64, also no test code, so I can do this:

#+begin_src sh
find -iregex '.*\.[ch]+' -and -not -path '*test*' -and -not -path '*mips*' -and -not -path '*arm*' -and -not -path '*x86_64*' | xargs ctags -e
#+end_src

   It's boring to do an exhausted list of unwanted folders, but it works well so far.

** change mode of files with whitespaces in filename             :find:xargs:
#+begin_src sh
  find ~/Videos/ -type f | xargs -d '\n' chmod 644
#+end_src

** grep only c++ files in a folder                                     :grep:

#+begin_src sh
grep -rnI --include=\*.{h,cpp} 'pattern'
#+end_src

** grep only java files in a folder and it's sub folders               :grep:
#+begin_src sh
 find . -name .repo -prune -o -name .git -prune -o -name out -prune -o -type f -name "*\.java" -print0 | xargs -0 grep --color -n "$@"
#+end_src
** cast grep result for vim                                        :grep:sed:
   Vim takes parameter =+n= after file name to go to line number =n= directly
   after open the file. To use result of grep with line number:
#+begin_src sh
  grep -rn <pattern> <folder> | sed 's/:\([0-9]*\):.*/ \+\1/'
#+end_src
   The =-r= option of sed[fn:sed] enables extended regular expressions, you can do it
   this way to be more precise with using =+= to indicate that the line number
   exists.
#+begin_src sh
  grep -rn <pattern> <folder> | sed -r 's/:([0-9]+):.*/ \+\1/'
#+end_src

** average a column                                                     :awk:
#+begin_src sh
cat file | awk '{ sum+=$N } END { print "average = ", sum/NR }'
#+end_src

** Print all columns but the very first one                             :awk:
#+begin_src sh
cat file | awk '{ $1=""; print $0 }'
#+end_src
** Print a column in a row                                              :awk:
#+begin_src sh
cat file | awk 'BEGIN { ORS = " " } { print $1 }'
#+end_src
** Replace top dir of a list of files                                   :awk:
#+begin_src sh
  cat file | awk -F '/' 'BEGIN {OFS="/"} {$1="$TOP"; print $0}'
#+end_src

** Match lines with hex number                                          :awk:
#+begin_src python
  foo = {
      0x00 : ["vendor_id",             2, {} ],
      0x02 : ["device_id",             2, {} ],
      ...
  }

  bar = {
      0x28 : ["cardbus_cis_ptr",       4, {} ],
      0x2C : ["subsystem_vendor_id",   2, {} ],
      0x2E : ["subsystem_id",          2, {} ],
      0x30 : ["expansion_rom_base",    4, {} ],
      ...
  }

  blabla = {
      0x18 : ["primary_bus_number",            1, {} ],
      0x19 : ["secondary_bus_number",          1, {} ],
      0x1A : ["subordinate_bus_number",        1, {} ],
      0x1B : ["secondary_latency_timer",       1, {} ],
      ...
  }
#+end_src
   You can list all addessed with =awk=
#+begin_src sh
  awk ' /$1 ~ 0x[0-9a-fA-F]+/ { print $1, $4 } ' file
#+end_src
** Trim whitespaces within awk                                          :awk:
#+begin_src sh
  awk '{gsub(/ /, "", $2); print $2}' file.txt
#+end_src

** Remove duplicated lines from files (not perfect)                    :sort:
#+begin_src sh
cat [files] | sort | uniq
#+end_src
** List 10 biggest files in current folder                             :sort:
#+begin_src sh
du -s * | sort -rg | head
#+end_src
** List top 10 RAM user                                                :sort:
#+begin_src sh
ps aux | sort -rgk +4 | head
#+end_src
** Check if string 'Finish: success' exists in log                      :sed:
#+begin_src sh
tail -f /path/to/log | sed '/^Finish success$/q'
#+end_src
** Remove lines of multiple files with a pattern                        :sed:
#+begin_src sh
sed -i '/pattern/d' files
#+end_src
** Remove trailing whitespaces and empty lines                          :sed:
#+begin_src sh
sed -i -e 's/[ ^I]*$//' -e '/^$/ d' files
#+end_src
   This command takes care of _lines contain only whitespaces_ by removing
   whitespaces then empty line.
** Run command on remote machine                                        :ssh:
#+begin_src sh
  ssh user@host '<CMD>'
#+end_src
** Run script on remote machine without copy file                       :ssh:
#+begin_src sh
  ssh user@host bash < /path/to/local/script
#+end_src
** deploy ssh identity to remote device                                 :ssh:
#+begin_src sh
  ssh-copy-id -i <idfile.pub> user@remote-machcine
#+end_src
   If the identity file is not the default one, you'll have to declare it in =~/.ssh/config=.
#+begin_src sh
  Host <nickname>
    HostName <domain name or ip address>
    User username
    IdentityFile ~/.ssh/you_file
#+end_src
** Create a detached SSH connection                                     :ssh:
#+begin_src sh
  screen -d -m -S svr1 -t user@server ssh user@server
#+end_src
   Where '-d -m' start a new session and detach from it. '-S' set the session name, and '-t' set the title of terminal.
   then you can attach to it later with
#+begin_src sh
screen -r svr1
#+end_src

   To detach it again, input 'C-a C-d'.

** Indent one-line XML file                                          :others:
   First, create indent style sheet as =indent.xsl=.
#+begin_src xml
  <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
   <xsl:output method="xml" indent="yes"/>
   <xsl:strip-space elements="*"/>
   <xsl:template match="/">
    <xsl:copy-of select="."/>
   </xsl:template>
  </xsl:stylesheet>
#+end_src
   Then use xml transformat tool.
#+begin_src sh
  $ xsltproc indent.xsl origin.xml > indented.xml
#+end_src

* bash
** To run a script with current environment
#+begin_src sh
. <script>
#+end_src
** Check if folder exists
#+begin_src sh
  if [ -d /path/to/folder ]; then
      # code here
  fi
#+end_src
** Check string length
#+begin_src sh
  # true if STRING length is 0
  if [ -z STRING ]; then
      # code here
  fi

  # true if STRING length is NOT 0
  if [ -n STRING ]; then
      # code here
  fi
#+end_src
** Expressions used with if
| Primary      | Meaning                                               |
|--------------+-------------------------------------------------------|
| =[ -a FILE]= | True if =FILE= exists                                 |
| =[ -b FILE]= | True if =FILE= exists and is a block special file     |
| =[ -c FILE]= | True if =FILE= exists and is a character special file |
| =[ -d FILE]= | True if =FILE= exists and is a directory              |
| =[ -e FILE]= | True if =FILE= exists                                 |
| =[ -f FILE]= | True if =FILE= exists and is a regular file           |
| =[ -g FILE]= | True if =FILE= exists and SGID bit is set             |
| =[ -h FILE]= | True if =FILE= exists and is a symbolic link          |

   see more [[http://www.tldp.org/LDP/Bash-Beginners-Guide/html/sect_07_01.html][here]].

** Check whether interactive
#+begin_src sh
if [ -z $PS1 ]; then
    # non-interactive
else
    # interactive
fi
#+end_src
Or check '$-' flag
#+begin_src sh
case $- in
    *i*)
        # interactive
    ;;
    *)
        # non-interactive
    ;;
esac
#+end_src
** Auto complete
   Check =/etc/bash_completion= and =/usr/share/bash-completion=
** Start editor (specified by $EDITOR)
#+begin_src sh
ctrl-x e
#+end_src
** Run previous cmd as root
#+begin_src sh
sudo !!
#+end_src
** Run a command N times																							 :bash:
#+begin_src sh
  for i in {1..$N}; do <CMD>; done
#+end_src
   or if you need to start from 0
#+begin_src sh
  i=0
  while [ $i -lt $N ]
  do
      # command
      let i=i+1
  done
#+end_src

** Last argument of previous cmd
#+begin_src sh
  touch very-loooooooooooooooooooooooong-file-name
  vi !$ # alt-. does the same
#+end_src
** Also last argument of previous cmd
#+begin_src sh
alt+.
#+end_src
** /n/th argument of previous cmd
#+begin_src sh
alt+n alt+.
#+end_src
** Create an empty file without using /touch/
#+begin_src sh
>file.txt
#+end_src
** Replace string of previous cmd
#+begin_src sh
^old^new
#+end_src
	 this is equivalent to
#+begin_src sh
!!:s/old/new/
#+end_src
	 to replace all instances of 'old' in previous command
#+begin_src sh
!!:gs/old/new/
#+end_src
	 more details [[http://www.gnu.org/software/bash/manual/bashref.html#History-Interaction][here]].
** Handle file paths
   List directory find in last argument of previous cmd.
#+begin_src sh
  ls $(dirname [alt+.])
#+end_src
   Get base name of last argument of previous cmd.
#+begin_src sh
  echo $(basename [alt+.])
#+end_src
** Result of last cmd
#+begin_src sh
echo $?
#+end_src

** =type= command
   To check definition of a command
#+begin_src sh
type <command>
#+end_src
** Exit ssh without stopping a long-run-cmd
#+begin_src sh
nohup <long-run-command> &
#+end_src

   Or you didn't see the command should be over-live the terminal.
#+begin_src sh
<long-run-command>
# press ctrl-z
bg && disown
#+end_src
* String manipulation
** Get length of string
#+begin_src sh
  string="hello world!"
  ${#string} # 12
#+end_src
** Get substring by position
#+begin_src sh
  ${string:position}
  # or
  ${string:position:length}
#+end_src
** Match shortest substring
#+begin_src sh
  # start from front
  ${string#substring}
  # start from back
  ${string%substring}
#+end_src
** Match longest substring
#+begin_src sh
  # from front
  ${string##substring}
  # from back
  ${string%%substring}
#+end_src
** Replace substring
#+begin_src sh
  # replace first match
  ${string/pattern/replace}
  # replace all matches
  ${string//pattern/replace}
  # replace only beginning
  ${string/#pattern/replace}
  # replace only ending
  ${string/%pattern/replace}
#+end_src
** Delete substring
#+begin_src sh
  # remove prefix, match shortest
  ${string#pattern}
  # remove suffix, match shortest
  ${string%pattern}
  # remove prefix, match longest
  ${string##substring}
  # remove suffix, match longest
  ${string%%substring}
#+end_src
** Convert string to uppercase
#+begin_src sh
  $(str^^)
  # or
  echo $str | tr [a-z] [A-Z]
  # or
  echo $str | awk '{print toupper($0)}'
#+end_src
* debugging
** Run shell script with *-x* option

#+begin_src sh
bash -x script-name
#+end_src

** Use *set* builtin command
#+begin_src sh
# noexec
set -n
# verbose
set -v
# turn on debug mode
set -x
for f in *
do
   file $f
done
# turn OFF debug mode
set +x
#+end_src

** Replace the standard shebang[fn:shebang] line
#+begin_src sh
#!/bin/bash -xv
#+end_src

[fn:shebang] Explain of shebang on [[http://en.wikipedia.org/wiki/Shebang_(Unix)][Wikipedia]].
[fn:sed] There is a splendid tutorial of sed can be found [[http://www.grymoire.com/Unix/sed.html][here]].
