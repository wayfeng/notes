#+TITLE:     Docker
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../css/article.css" />
#+html_head: <link rel="stylesheet" type="text/css" href="../css/toc.css" />
#+OPTIONS:   tex:verbatim

* Install Docker CE for Ubuntu
  See [[https://docs.docker.com/install/linux/docker-ce/ubuntu/][details]] about installing Docker CE.
** Install using the repository
#+begin_src sh
sudo apt update
sudo apt install ca-certificates curl gnupg lsb-release
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
sudo apt update
sudo apt-get install docker-ce docker-ce-cli containerd.io
#+end_src

** Using Docker as non-root user
#+begin_src sh
  sudo usermod -aG docker $USER
#+end_src

** Docker Compose
#+begin_src sh
  sudo curl -L https://github.com/docker/compose/releases/download/<version>/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose
  sudo chmod a+x /usr/local/bin/docker-compose
#+end_src

* Docker Proxy Setting
  [[https://stackoverflow.com/questions/26550360/docker-ubuntu-behind-proxy][ref]]

#+begin_src sh
  $ cat /etc/systemd/system/docker.service.d/http-proxy.conf
  [Service]
  Environment="HTTP_PROXY=http://proxy-prc.intel.com:912/" "NO_PROXY=localhost, 127.0.0.1, intel.com"
  $ cat /etc/systemd/system/docker.service.d/https-proxy.conf
  [Service]
  Environment="HTTPS_PROXY=http://proxy-prc.intel.com:912/" "NO_PROXY=localhost, 127.0.0.1, intel.com"

  $ sudo systemctl daemon-reload
  $ sudo systemctl restart docker
#+end_src

To setup proxy in docker containers, edit =~/.docker/config.json=
#+begin_src js
  {
          "proxies": {
                  "default": {
                          "httpProxy": "http://proxy.address:port",
                          "httpsProxy": "http://proxy.address:port",
                          "noProxy": "localhost"
                  }
          }
  }
#+end_src

* Docker Usages

** Run with bash
#+begin_src sh
  docker run -it ubuntu:18.04
#+end_src

** Attach to a container
#+begin_src sh
  docker exec -it <image> /bin/bash
#+end_src

** Check history
#+begin_src sh
  docker image history --no-trunc <image_name> > image_history
#+end_src

** Check logs of container
#+begin_src sh
  docker logs <container>
#+end_src

** Save image
#+begin_src sh
  docker save <image_name> > tmp.tar
  tar xvf tmp.tar
#+end_src

** List docker images by name
#+begin_src sh
  docker images "k8s.*"
  # or use filter
  docker images --filter reference='k8s.*'
#+end_src

** Remove all containers
#+begin_src sh
  docker rm -f $(docker ps -a -q)
#+end_src

** Delete all docker images
#+begin_src sh
  docker rmi -f $(docker images -q)
#+end_src

** Delete docker images with no tags
#+begin_src sh
  docker rmi $(docker images --filter dangling=true -q)
#+end_src

** Delete volumes
#+begin_src sh
  docker volume rm $(docker volume ls -qf dangling=true)
#+end_src

** Check IP addr of containers
#+begin_src sh
  docker inspect -f '{{ .NetworkSettings.IPAddress }}' mqtt-broker

  # all containers
  docker inspect -f '{{ .NetworkSettings.IPAddress }}' $(docker ps -aq)
#+end_src

** Ping container by name
   In order to let containers find each other by names instead of IP address,
   all containers have to be in same docker network. Keep in mind that the default
   network won't work.
#+begin_src sh
  docker network create testnet
  docker run --name mysql --network testnet mysql:latest
  docker run --network testnet busybox ping mysql -c 4
#+end_src

* Dockerfile Usages

** Heredoc
   To create text file with multiple lines, in bash we can use here-document.
#+begin_src sh
  cat <<EOF > /tmp/tmp.txt
  hello line #1
  hello line #2
  finish
  EOF
#+end_src
   Use =printf= in Dockerfile to get the equivalent.
#+begin_src sh
  RUN printf 'hello line #1\n\
  hello line #2\n\
  finish' > /tmp/tmp.txt
#+end_src

* Docker Compose
** Environment Variables
   To use environment variables in docker compose file, put variables in =.env= file in the same folder of docker compose file. Check [[defination][details]].

* Docker China Mirrors

  Add configure file: =/etc/docker/daemon.json=, then restart docker.

#+begin_src json
{
    "registry-mirrors": ["https://registry.docker-cn.com"]
}
#+end_src

  Alpine China mirror

#+begin_src sh
  sed -i 's/dl-cdn.alpinelinux.org/mirrors.tuna.tsinghua.edu.cn/g' /etc/apk/repositories
#+end_src
