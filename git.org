#+TITLE:     Daily GIT
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/article.css" />
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/toc.css" />
#+INDEX: git

* Git Concept
** Terms

| name         | explanation                                                                                                      |
|--------------+------------------------------------------------------------------------------------------------------------------|
| repository   | A *repository* is a collection of *commits*                                                                      |
| staging area | Before changes of *working tree* are committed to *repository*, it goes to *staging area* first.                 |
| working tree | A derectory on file system which has a *repository* associated to it.                                            |
| commit       | A *commit* is a snapshot of your *working tree* at some point in time                                            |
| branch       | A *branch* is a name for a *commit*, also called a *reference*.                                                  |
| tag          | A *tag* is also a name of a *commit*, but it always names the same commit and can have its own description text. |
| master       | the mainline of development branch                                                                               |
| HEAD         | *HEAD* indicates what is checked out in current *working tree*.                                                  |

** Readings
  - [[http://git-scm.com/book/][Pro Git]]
  - [[http://eagain.net/articles/git-for-computer-scientists/][Git for Computer Scientists]]
  - [[http://ftp.newartisans.com/pub/git.from.bottom.up.pdf][Git from Bottom Up]]
  - [[http://tom.preston-werner.com/2009/05/19/the-git-parable.html][The Git Parable]]
  - [[http://git-scm.com/documentation][Git Documentation]]
  - [[http://git.wiki.kernel.org/][Git wiki]]

* Git Basic
** Create a new repository locally
#+BEGIN_SRC sh
git init
#+END_SRC
** Get repository from a remote server
#+BEGIN_SRC sh
git clone <URL>
#+END_SRC

** Current status
#+BEGIN_SRC sh
git status
#+END_SRC
** Diff changes
#+BEGIN_SRC sh
git diff <FILE>
#+END_SRC
** Diff with another branch
#+BEGIN_SRC sh
git diff <another-branch>
#+END_SRC
** Staging changes
#+BEGIN_SRC sh
git add <FILE>
#+END_SRC
** Diff staged changes
#+BEGIN_SRC sh
git diff --cached
#+END_SRC
** Check whitespaces errors
#+BEGIN_SRC sh
git diff --check
#+END_SRC

** Commit changes
#+BEGIN_SRC sh
git commit
#+END_SRC
** Commit/Checkout/Stage Interactively
#+BEGIN_SRC sh
git commit -p <file>
git checkout -p <file>
git add -p <file>
#+END_SRC
** Branches
   Show branch(es)
#+BEGIN_SRC sh
git branch
#+END_SRC

   Check out remote branch
#+BEGIN_SRC sh
git checkout -b <local-branch> origin/<remote-branch>
#+END_SRC

   It is commom enough to use same local branch name, so git provide shorthand like this
#+BEGIN_SRC sh
git checkout --track origin/<remote-branch>
#+END_SRC

   push local branch to remote server:
#+BEGIN_SRC sh
git push remote <branch>
#+END_SRC

   to delete a remote branch
#+BEGIN_SRC sh
git push origin --delete <branch>
#+END_SRC
** List Tags
#+BEGIN_SRC sh
git tag -l
#+END_SRC
** Checkout a specific tag
#+BEGIN_SRC sh
git checkout tags/<tagname>
#+END_SRC
** Create tag
   An annotated tag is stored as full object in Git database.
   While lightweight tag is merely a pointer to a commit.
#+BEGIN_SRC sh
  git tag -a v1.0 -m 'version 1.0' # annotated tag
  git tag v1.0-lw # lightweight tag
#+END_SRC
** Share a tag
#+BEGIN_SRC sh
  git push origin v1.0
#+END_SRC
** Revert just added file
#+BEGIN_SRC sh
  git reset <file>
#+END_SRC
** Roll back commitment

   When you have done some bad commit on a branch like this:
#+BEGIN_SRC sh
A - B - C - D - E - F
#+END_SRC
   and you want to roll back to /C/ and discard /D/, /E/ and /F/.

   First, you shold will need the hash id of /C/, the first several number is sufficient (db7c2b7 for example).

   Then execute the reset command of git:
#+BEGIN_SRC sh
git reset --soft db7c2b7
#+END_SRC
   or you want to discard the changes you have made forever (before you do it, think about it twice):
#+BEGIN_SRC sh
git reset --hard db7c2b7
#+END_SRC
   After reset the branch, the commitment /D/, /E/, and /F/ are removed. Next time you commit some thing, it will directly behind /C/.

   If you have a remote repository and you want to change it also, push the resetting like this:
#+BEGIN_SRC sh
git push --force origin
#+END_SRC

   To get a list of HEADs with =reflog=
#+BEGIN_SRC sh
git reflog
#+END_SRC

** Git behind proxy
   - install socat
#+BEGIN_SRC sh
   $ sudo apt-get install socat
#+END_SRC
   - create proxy-cmd.sh containing (replace your_proxy and your_proxy_port)
#+BEGIN_SRC sh
   #!/bin/bash
   socat STDIO PROXY:your_proxy:$1:$2,proxyport=your_proxy_port
#+END_SRC
   - change perm and export
#+BEGIN_SRC sh
   $ chmod +x proxy-cmd.sh
   $ export GIT_PROXY_COMMAND=proxy-cmd.sh
#+END_SRC

** Ignore SSL certification
#+BEGIN_SRC sh
env GIT_SSL_NO_VERIFY=true git clone https://github...
#+END_SRC

** Automatic template for commit messages
   You can set a global template for all git projects.
#+BEGIN_SRC sh
  git config --global commit.template ~/.git-commit-message.global
#+END_SRC
   Or you can set a local template for a specific project.
#+BEGIN_SRC sh
  cd <path/to/project>; git config --local commit.template <path/to/template>
#+END_SRC

** Setup user name and email
#+BEGIN_SRC sh
  git config --global user.name <user name>
  git config --global user.email <user@domain.com>
#+END_SRC

* Git Advance
** Make a bare repository
#+BEGIN_SRC sh
git clone --bare /path/to/original/code
#+END_SRC
** Stash changes
#+BEGIN_SRC sh
git stash
#+END_SRC
   Diff against stash
#+BEGIN_SRC sh
git stash show -p stash@{0}
#+END_SRC
   See more details [[http://git-scm.com/book/en/Git-Tools-Stashing][here]].

** Use rebase to merge branches
   Use rebase can avoid one refence has more than one parent after merge.

** Histories
   filter logs by author
#+BEGIN_SRC sh
git log --author='@google.com'
#+END_SRC
   formating out put with ISO date, author Email and subject.
#+BEGIN_SRC sh
git log --format=format:"%aD %aE %s"
#+END_SRC
   history as a graph
#+BEGIN_SRC sh
git log --graph --branches --oneline --decorate
#+END_SRC
** History of every line of a file
#+BEGIN_SRC sh
git blame <filename>
#+END_SRC
   or
#+BEGIN_SRC sh
git annotate <filename>
#+END_SRC
** Find changed files between commits
#+BEGIN_SRC sh
git diff --name-only <ci1> <ci2>
#+END_SRC

** Replace URL

#+BEGIN_SRC conf
  [url "http://fastmirror.com/path/proj.git"]
      insteadOf = https://github.com/path/proj.git
#+END_SRC
* Git Configuration

* Gitosis (Obsoleted)
** Installation and Configuration
   Install gitosis
#+BEGIN_SRC sh
   $ sudo apt-get install gitosis
#+END_SRC
   You might want to put repositories in /home/git/ rather than /srv/gitosis/.
#+BEGIN_SRC sh
   $ sudo usermod -d /home/git/ gitosis
#+END_SRC
   Or add a new git management user
#+BEGIN_SRC sh
   $ sudo adduser \
   --system \
   --shell /bin/sh \
   --gecos 'git verison control' \
   --group \
   --disabled-password \
   --home /home/git \
   git
#+END_SRC
   You will need a public ssh key to continue.
#+BEGIN_SRC sh
   $ ssh-keygen -t rsa
#+END_SRC
   Then initialize the gitosis repository with the rss key.
#+BEGIN_SRC sh
   $ sudo -H -u gitosis gitosis-init < /tmp/id_dsa.pub
#+END_SRC
   You'll see messages like this.
#+BEGIN_SRC sh
   Initialized empty Git repository in /home/git/repositories/gitosis-admin.git/
   Reinitialized existing Git repository in /home/git/repositories/gitosis-admin.git/
#+END_SRC
   Now you can get the admin files
#+BEGIN_SRC sh
   $ git clone git@HOST:gitosis-admin.git
#+END_SRC
** Add Users
   Gather users' SSH public key and add them to gitosis-admin.
#+BEGIN_SRC sh
   $ cd gitosis-admin
   $ cp ~/alice.pub ~/bob.pub keydir/
   $ git add keydir/
#+END_SRC
   Change gitosis.conf
#+BEGIN_SRC sh
[group myteam]
- member = fw  
+ member = fw alice bob  
writable = project
#+END_SRC
   The push it to the git repository.
#+BEGIN_SRC sh
   $ git commit -a -m 'Granted Alice and Bob commit rights to project'
   $ git push
#+END_SRC
** Add Repositories
   Change the gitosis.conf
#+BEGIN_SRC sh
[group mygroup] 
members = member1 member2 member3
writable = projectA projectB
#+END_SRC
   The push it to the gitosis-admin.

   Add a project
#+BEGIN_SRC sh
mdkir projectA
cd projectA
git init
git add .
git remote add origin git@HOST:projectA.git
do some work
git push origin master:refs/heads/master
#+END_SRC
** Public Access
#+BEGIN_SRC sh
  sudo -u git git-daemon --base-path=/home/git/repositories/ --export-all
#+END_SRC


* Github
** config SSH client
   Generate ssh key pair, key pair will be found in ~/.ssh/ by default.
#+BEGIN_SRC sh
  ssh-keygen -t dsa -C <email>
#+END_SRC

   Upload .ssh/id_dsa.pub to github.com. (check setting -> ssh key after login to github.com)

   If you're behind a proxy, install corkscrew first.
#+BEGIN_SRC sh
  sudo dnf install corkscrew
#+END_SRC

   Then configure ssh by editing =.ssh/config=.
#+BEGIN_SRC sh
  host github.com
    hostname ssh.github.com
    user git
    port 443
    ProxyCommand corkscrew proxy.domain.com port %h %p
    IdentityFile ~/.ssh/id_dsa
#+END_SRC

   Some proxy server may block port 22, so you have to use =ssh.github.com=
   as server address and =443= as port.

   For direct access without proxy, =.ssh/config= will be easier.
#+BEGIN_SRC sh
  host github.com
    user git
    IdentityFile ~/.ssh/id_dsa
#+END_SRC

   Now you can try if your setup is working
#+BEGIN_SRC sh
ssh -T github.com
#+END_SRC

   If it works, you will see message like this
: Hi Name! You've successfully authenticated, but GitHub does not provide shell access.

   Congrats! Now you can pull/push your code from/to github through SSH.


* Git Best Practices
** Branching Model
   - [[http://git-scm.com/book/ch3-4.html][basic model]]
   - more complex [[http://nvie.com/posts/a-successful-git-branching-model/][example]]
