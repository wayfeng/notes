#+TITLE:     Using Repo
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/toc.css" />
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/article.css" />

* Get help
  You can use =repo help= to get a list of =repo= commands, then use
  =repo help <command>= to get the details of a specific command.
#+BEGIN_SRC sh
$ repo help init
$ repo help manifest
#+END_SRC

* Configure user name

  The default user name and email should be stored in ~/.gitconfig.
  Use =git config= command to set or change them. see [[file:../tools/git.org][git]].

  In case you want to use a different user name or email in repo project,
  you can run repo init again with =config-name= option.

#+BEGIN_SRC sh
$ repo init --config-name
#+END_SRC

* Download source efficiently
  Repo support parallel downloading, but please choose /n/ carefully so that
  you're not bothering your team with a network jam.

#+BEGIN_SRC sh
$ repo sync -j <n>
#+END_SRC

  You can also download only current branch.

#+BEGIN_SRC sh
$ repo sync -c -j <n>
#+END_SRC

  Disable unwanted groups, such as darwin, x86 and mips, assuming you're
  working on linux and your target is an ARM device.

#+BEGIN_SRC sh
$ repo init -g default,pdk,-darwin,-mips,-x86
#+END_SRC

  When there is already a local repository, you can use it as a reference
  to avoid fetch data from server.

#+BEGIN_SRC sh
$ repo init --reference=<path/to/local/repo> -u <url> -b <branch>
#+END_SRC

* Create a topic branch

#+BEGIN_SRC sh
$ repo start <branch-name> [--all | <proj_list>]
#+END_SRC

* Upload local branch to review server

  After you did your local changes, commit your change in each project,
  or do a =repo forall=, then run =upload= command:
#+BEGIN_SRC sh
$ repo upload <project>...
#+END_SRC
  You will get a list of choice to upload, and the patch(es) you chose
  will be pushed to review server, but not the local branch.

  Make sure =sync= before =upload= to save yourself many troubles.
#+BEGIN_SRC sh
$ repo sync -c
$ repo upload
#+END_SRC

* Add a patchset to a change on review server

  What you have to do is change the code, then run
#+BEGIN_SRC sh
git commit --amend
#+END_SRC
  Then do a =repo upload= again.

* Create a remote branch
  First create a branch for manifest file

#+BEGIN_SRC sh
$ cd .repo/manifest
$ git branch dev
#+END_SRC

  then push new branch =dev= to server

#+BEGIN_SRC sh
$ git push origin dev
#+END_SRC

  for the record, to delete a remote branch

#+BEGIN_SRC sh
$ git push origin :dev
#+END_SRC

* Save a snapshot of source tree
  To save source tree

#+BEGIN_SRC sh
$ repo manifest -o snapshot.xml -r
#+END_SRC

  To restore the saved snapshot

#+BEGIN_SRC sh
$ cp snapshot.xml .repo/manifests
$ repo init -m snapshot.xml
$ repo sync -d
#+END_SRC

* Remove a project

#+BEGIN_SRC sh
$ rm -r hardware/qcom/display
$ rm -r .repo/projects/hardware/qcom/display.git
#+END_SRC

* Diff releases

  To diff 2 branches from same repository, you can run =git log= through
  a =forall= command:
#+BEGIN_SRC sh
$ repo forall -pc 'git log --no-merges --oneline <old_branch>..<new_branch>'
#+END_SRC
* Rebase a local topic branch
  I've a local topic branch, with a published but not merged change. After a few days I need
  to commit a new patch to the change, but the remote branch has been changed. Then I'll need
  to rebase my local topic branch to the remote HEAD.
#+BEGIN_SRC sh
  repo rebase -i [project]
#+END_SRC
