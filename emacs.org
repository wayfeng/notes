#+TITLE:     Emacs and Elisp
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../css/article.css" />
#+html_head: <link rel="stylesheet" type="text/css" href="../css/toc.css" />
#+OPTIONS:   tex:verbatim

* Basic

** Basic Search

| key binding   | description         |
|---------------+---------------------|
| 'C-s'         | search forward      |
| 'C-r'         | search backward     |
| 'C-M-5'       | query replace       |
| 'C-s C-q C-j' | search for new line |
| 'C-s C-q tab' | search for tab      |

** [[http://www.emacswiki.org/emacs/RegularExpression][Regular Expression]]
  Key bindings

| key binding      | description                       |
|------------------+-----------------------------------|
| `C-M-s'          | regexp search                     |
| `C-M-%'          | regexp replace                    |
| `M-x occur'      | regexp search for all occurrences |
| `M-x re-builder' | try regexp with current buffer    |

  Syntax

| code     | description                                            |
|----------+--------------------------------------------------------|
| .        | any character (but newline)                            |
| ,*       | previous character or group, repeated 0 or more time   |
| +        | previous character or group, repeated 1 or more time   |
| ?        | previous character or group, repeated 0 or 1 time      |
| ^        | start of line                                          |
| $        | end of line                                            |
| [a-z]    | any character between a and z                          |
| [^a-z]   | any character not between a and z                      |
| \        | prevents interpretation of following special char      |
| \\vert   | or                                                     |
| \w       | word constituent                                       |
| \b       | word boundary                                          |
| \sc      | character with c syntax (e.g. \s- for whitespace char) |
| \(       | start of group                                         |
| \)       | end of group                                           |
| \< \>    | start end of word                                      |
| \_< \_>  | start\end of symbol                                    |
| \` \'    | start\end of buffer\string                             |
| \1       | string matched by the first group                      |
| \n       | string matched by the nth group                        |
| \{n\}    | previous character or group, repeated n times          |
| \{n,\}   | previous character or group, repeated n or more times  |
| \{n,n'\} | previous character or group, repeated n to n' times    |
| \=       | match succeeds if it is located at point               |

** Swapping
	 - To swap chars such as "ab", put cursor at 'b', then press 'C-t', you'll get "ba".
	 - To swap words such as "first second", put cursor at "second", then press 'M-t', you'll get "first second".
	 - To swap lines such as "first line\n second line", put cursor at "second line", then press 'C-x C-t'.
** Key Binding
  Global key map
#+BEGIN_SRC elisp
  (global-set-key key binding)
  ;; or
  (define-key (current-global-map) key binding)
#+END_SRC
  Local key map
#+BEGIN_SRC elisp
  (local-set-key key binding)
  ;; or
  (define-key (current-local-map) key binding)
#+END_SRC

** Macros

| key binding | description                            |
|-------------+----------------------------------------|
| C-x (       | start defining a keyboard macro;       |
| C-x )       | end defining a keyboard macro;         |
| C-x e       | execute a keyboard macro;              |
| C-u n C-x e | execute last keyboard marco /n/ times; |
| C-x h       | mark the whole buffer;                 |
| M-z         | zap-to-char;                           |

** [[http://www.gnu.org/software/emacs/elisp/html_node/Time-Parsing.html][Parsing and Formatting times]]
*** Get Current Time
#+BEGIN_SRC elisp
    (current-time)
#+END_SRC
*** Format Time String
#+BEGIN_SRC elisp
    (format-time-string "%Y-%m-%d %a" (current-time))
#+END_SRC
    will get this
: 2011-09-23 Fri
    Some useful formatting sequences:
| key | description                         |
|-----+-------------------------------------|
| %a  | abbreviated name of the day of week |
| %A  | full name of the day of week        |
| %b  | abbreviated name of the month       |
| %B  | full name of the month              |
| %Y  | 4 digits format of year             |
| %y  | 2 digits format of year             |
| %m  | month                               |
| %d  | day of month                        |

** Set Default Coding
#+BEGIN_SRC elisp
  ;; setup priority coding
  (prefer-coding-system 'us-ascii-unix)
  (setq coding-system-for-write 'us-ascii-unix)
  (set-coding-system-priority 'us-ascii-unix)
#+END_SRC

** Work with windows (not M$ windows :) )

| key binding | description                          |
|-------------+--------------------------------------|
| C-w 3       | split current window, side by side   |
| C-w 2       | split current window, top and bottom |
| C-w 1       | keep only current window             |
| C-w 0       | delete current window                |
| C-x ^       | increase height of current window    |
| C-x }       | increase width of current window     |
| C-x {       | decrease width of current window     |
| C-x +       | balance all windows                  |

** Behind proxy
#+BEGIN_SRC elisp
  (setq url-proxy-services '(("no-proxy" . "localhost, 127.0.0.1")
                             ("http" . "proxy.work.com:port")
                             ("https" . "proxy.work.com:port")))
#+END_SRC

* Sorting
*** Case sensitive
    Emacs sorting is case sensitive by default, set variable /sort-fold-case/ to /t/ to make it case insensitive.

*** Sorting order
    Emacs sorting use /lexicographic/ by default for all but /sort-numeric-field/.
    Sort with reverse order
#+begin_src sh
C-u 1 M-x sort-lines
#+end_src

    Sort lines by second word
#+begin_src sh
C-u 2 M-x sort-lines
#+end_src

*** Sorting by Lines, Paragraphs and Pages
    /sort-lines/, /sort-paragraph/, /sort-pages/.
    The variables /paragraph-start/ and /paragraph-separate/ controls how paragraph works.

*** Sorting by Field
    /sort-field/ and /sort-numeric-field/.

*** Sorting by Regular Expression
    /sort-regexp-field/

* Rectangle Operation
  - to select a rectangle, set mark to one end then move cursor to opposite end.
  - 'kill-rectangle' does what it says
  - 'yank-rectangle' too
  - 'M-x string-insert-rectangle' too
  - 'C-x r t string <RET>' to replace a rectangle

* Programming

** Find a function definition in buffer
#+begin_src sh
M-x imenu
#+end_src

** Occurs of a regexp in buffer
#+begin_src sh
M-x occur <regexp>
#+end_src

** Chinese Input
   - Using ibus in emacs
#+begin_src sh
sudo apt install ibus-el
#+end_src
   and run following command in emacs to start ibus mode.
#+begin_src sh
M-x ibus-mode
#+end_src

** Google C/C++ coding style for emacs
   Download google-c-style.el
#+begin_src sh
$ wget http://google-styleguide.googlecode.com/svn/trunk/google-c-style.el
#+end_src

   Setup emacs to use Google C/C++ style. In =~/.emacs=
#+begin_src emacs-lisp
  (require 'google-c-style)
  ; 'return-and-indent is necessary for emacs < 24.4
  ; it's default behavior since 24.4
  (add-hook 'c-mode-common-hook 'google-make-newline-indent)
  (add-hook 'c-mode-common-hook 'google-set-c-style)
#+end_src

* Yasnippet
** Install
#+begin_src sh
$ sudo apt-get install yasnippet
#+end_src
** templates
   templates of yasnippet is directory structrue in =/usr/share/emacs/site-lisp/yasnippet/snippets/=, I'll use this folder as =$TOP= in later examples.

   to add =while= for =c-mode= and =c++-mode=, edit $TOP/text-mode/cc-mode/while
#+begin_src c
  #name : while (...) { ... }
  # --
  while (${1:condition}) {
      $0
  }
#+end_src

* Advanced

** Create Your Own Mode
   - [[http://www.gnu.org/software/emacs/manual/html_node/elisp/Basic-Major-Modes.html#Basic-Major-Modes][Basic Major Mode]]
   - [[http://www.emacswiki.org/emacs/SampleMode][Sample]]
   - [[http://www.emacswiki.org/emacs/DerivedMode][Derived Major Mode]]
   - [[http://www.gnu.org/software/emacs/manual/html_node/elisp/Derived-Modes.html][Derived Modes]]


* Ebrowse
** Generate database from source code
#+BEGIN_SRC sh
ebrowse *.h *.cc
#+END_SRC
** Open browse file
: C-x C-f BROWSE
** Find class
: / <ClassName>

* Install Packages

  Setup package repositories
#+BEGIN_SRC elisp
;; configure package archives
(require 'package)
(add-to-list 'package-archives
             '("melpa-stable" . "http://stable.melpa.org/packages/") t)
(package-initialize)
#+END_SRC

  show available/installed packages
: M-x list-packages

  install package
: M-x package-install

* Manually Compile & Install
Prepare ubuntu

#+BEGIN_SRC sh
sudo apt-get install build-essential
sudo apt-get build-dep emacs24
#+END_SRC

Download emacs24.4, then compile

#+BEGIN_SRC sh
./configure
make
sudo make install
#+END_SRC
