#+SETUPFILE: ./setup/article.org
#+TITLE:     Emacs and Elisp
#+DATE:      <2014-10-30 Thu>

* Basic

** Basic Search
   - 'C-s' : search forward
   - 'C-r' : search backward
   - 'C-M-5' : query replace
   - 'C-s C-q C-j': search for new line
   - 'C-s C-q tab': search for tab
** [[http://www.emacswiki.org/emacs/RegularExpression][Regular Expression]]
*** Key bindings
   - `C-M-s': regexp search;
   - `C-M-%': regexp replace;
   - `M-x occur': regexp search for all occurrences;
   - `M-x re-builder': try regexp with current buffer

*** Backslash

#+BEGIN_EXAMPLE
  .        any character (but newline)
  *        previous character or group, repeated 0 or more time
  +        previous character or group, repeated 1 or more time
  ?        previous character or group, repeated 0 or 1 time  
  ^        start of line
  $        end of line
  [...]    any character between brackets
  [^..]    any character not in the brackets
  [a-z]    any character between a and z
  \        prevents interpretation of following special char
  \|       or
  \w       word constituent
  \b       word boundary
  \sc      character with c syntax (e.g. \s- for whitespace char)
  \( \)    start\end of group
  \< \>    start\end of word
  \_< \_>  start\end of symbol
  \` \'    start\end of buffer\string
  \1       string matched by the first group
  \n       string matched by the nth group
  \{3\}    previous character or group, repeated 3 times
  \{3,\}   previous character or group, repeated 3 or more times
  \{3,6\}  previous character or group, repeated 3 to 6 times
  \=       match succeeds if it is located at point
#+END_EXAMPLE

** Key Binding
  Global key map
#+BEGIN_SRC elisp
  (global-set-key key binding)
  ;; or
  (define-key (current-global-map) key binding)
#+END_SRC
  Local key map
#+BEGIN_SRC elisp
  (local-set-key key binding)
  ;; or
  (define-key (current-local-map) key binding)
#+END_SRC
** Useful Keyboard Macros
   - `C-x (': start defining a keyboard macro;
   - `C-x )': end defining a keyboard macro;
   - `C-x e': execute a keyboard macro;
   - `C-u n C-x e': execute last keyboard marco /n/ times;
   
   - `C-x h': mark the whole buffer;
   - `M-z': zap-to-char;
** [[http://www.gnu.org/software/emacs/elisp/html_node/Time-Parsing.html][Parsing and Formatting times]]
*** Get Current Time
#+BEGIN_SRC elisp
    (current-time)
#+END_SRC
*** Format Time String
#+BEGIN_SRC elisp
    (format-time-string "%Y-%m-%d %a" (current-time))
#+END_SRC
    will get this
: 2011-09-23 Fri
    Some useful formatting sequences:
| key | description                         |
|-----+-------------------------------------|
| %a  | abbreviated name of the day of week |
| %A  | full name of the day of week        |
| %b  | abbreviated name of the month       |
| %B  | full name of the month              |
| %Y  | 4 digits format of year             |
| %y  | 2 digits format of year             |
| %m  | month                               |
| %d  | day of month                        |

** Set Default Coding
#+BEGIN_SRC elisp
  ;; setup priority coding
  (prefer-coding-system 'us-ascii-unix)
  (setq coding-system-for-write 'us-ascii-unix)
  (set-coding-system-priority 'us-ascii-unix)
#+END_SRC

** Work with windows (not MS windows :) )
   - split current window, side by side
: C-w 3
   - split current window, top and bottom
: C-w 2
   - keep only current window
: C-w 1
   - delete current window
: C-w 0
   - increase height of current window
: C-x ^
   - increase width of current window
: C-x }
   - decrease width of current window
: C-x {
   - balance all windows
: C-x +

** Behind proxy
#+BEGIN_SRC elisp
  (setq url-proxy-services '(("no-proxy" . "work.com")
                             ("http" . "proxy.work.com:port")))
#+END_SRC

* Sorting
*** Case sensitive
    Emacs sorting is case sensitive by default, set variable /sort-fold-case/ to /t/ to make it case insensitive.

*** Sorting order
    Emacs sorting use /lexicographic/ by default for all but /sort-numeric-field/.
    Sort with reverse order
: C-u 1 M-x sort-lines
    Sort lines by second word
: C-u 2 M-x sort-lines

*** Sorting by Lines, Paragraphs and Pages
    /sort-lines/, /sort-paragraph/, /sort-pages/.
    The variables /paragraph-start/ and /paragraph-separate/ controls how paragraph works.

*** Sorting by Field
    /sort-field/ and /sort-numeric-field/.

*** Sorting by Regular Expression
    /sort-regexp-field/

* Rectangle Operation
  - to select a rectangle, set mark to one end then move cursor to opposite end.
  - 'kill-rectangle' does what it says
  - 'yank-rectangle' too
  - 'M-x string-insert-rectangle' too
  - 'C-x r t string <RET>' to replace a rectangle

* Programming

** Find a function definition in buffer
: M-x imenu
** Occurs of a regexp in buffer
: M-x occur <regexp>

** Chinese Input
   - Using ibus in emacs
#+BEGIN_SRC sh
aptitude install ibus-el
#+END_SRC
   and run following command in emacs to start ibus mode.
: M-x ibus-mode

** Google C/C++ coding style for emacs
   Download google-c-style.el
: wget http://google-styleguide.googlecode.com/svn/trunk/google-c-style.el

   Setup emacs to use Google C/C++ style. In =~/.emacs=
#+BEGIN_SRC emacs-lisp
  (require 'google-c-style)
  (add-hook 'c-mode-common-hook 'google-set-c-style)
#+END_SRC

* Advanced

** Create Your Own Mode
   - [[http://www.gnu.org/software/emacs/manual/html_node/elisp/Basic-Major-Modes.html#Basic-Major-Modes][Basic Major Mode]]
   - [[http://www.emacswiki.org/emacs/SampleMode][Sample]]
   - [[http://www.emacswiki.org/emacs/DerivedMode][Derived Major Mode]]
   - [[http://www.gnu.org/software/emacs/manual/html_node/elisp/Derived-Modes.html][Derived Modes]]

* Ebrowse
** Generate database from source code
#+BEGIN_SRC sh
ebrowse *.h *.cc
#+END_SRC
** Open browse file
: C-x C-f BROWSE
** Find class
: / <ClassName>


#+END_SRC
* Manually Install
Prepare ubuntu
: sudo apt-get install build-essential
: sudo apt-get build-dep emacs24
Download emacs24.4, then compile
: ./configure
: make
: sudo make install
