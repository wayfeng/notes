#+TITLE:     Daily Vim
#+html_head: <link rel="stylesheet" type="text/css" href="../css/article.css" />
#+html_head: <link rel="stylesheet" type="text/css" href="../css/toc.css" />
#+options:   ^:nil
#+INDEX: vim

* Configuration
** Configure file
   =~/.vimrc=
** commenting in vimrc
    Put a double quote in front of line you want to comment out.
**  An example here.
#+begin_src sh
filetype on
syntax on
set autoindent
set smartindent
set cindent
set showmatch
set tabstop=2
set shiftwidth=2
set hlsearch
#+end_src

* Modes

| Name         | Description                                        | Help Page               |
|--------------+----------------------------------------------------+-------------------------|
| normal       | For navigation and manipulation of text.           | :help normal-mode       |
| insert       | For inserting new text.                            | :help insert-mode       |
| visual       | For text selection.                                | :help visual-mode       |
| select       | Similar to visual, more MS-like.                   | :help select-mode       |
| command-line | For entering editing command.                      | :help command-line-mode |
| ex-mode      | Similar to command-line, opt for batch processing. | :help ex-mode           |

* Files
** Open file
  Open remote file
#+begin_src sh
vim src://user@host//path/to/file
#+end_src
  Open file to a given line number
#+begin_src sh
vim filename +n
#+end_src

** Set File Formats
#+begin_src sh
set fileformat=<dos|unix|mac>
#+end_src

* Editing
** Search
   - press =/= then type keywords to search.
   - =n= to search forward.
   - =N= to search backward.

** Search and Replace
#+begin_src sh
  # replace in current line
  :s/old/new/<flags>
  # replace all
  :%s/old/new/g
  # interactive replace
  :%s/old/new/gc
#+end_src

** Count Pattern Matched
#+begin_src sh
  :%s/pattern//n
#+end_src

** Sort lines
#+begin_src sh
  # Sort entire file in reverse
  :%sort!
  # Sort and remove duplicated lines
  :%sort u
  # Sort in numeric
  :sort n
  # Sort lines from 296 to 349, inclusively
  :296,349sort
#+end_src

** Delete Unwanted Whitespaces[fn:1]
   Add to =.vimrc=
#+begin_src sh
  # for one type of file
  autocmd BufWritePre *.pl %s/\s\+$//e
  # for some types of file
  autocmd FileType c,cpp,java,php autocmd BufWritePre <buffer> %s/\s\+$//e
#+end_src

** Convert exsiting TABs to Whitespaces
#+begin_src sh
  :set expandtab
  :retab
#+end_src

** Delete lines containing a pattern
#+begin_src sh
  :g/pattern/d
#+end_src

** Changing Case
#+begin_src sh
  gUw # change word to upper case
  guw # change word to lower case
  g~w # swap case of word
#+end_src

** Moving lines
   Reverse lines between /m/ and /n/:
#+begin_src sh
  :<m>,<n>g/^/m<m-1>
#+end_src

** Marks[fn:2]
   - =ma= set a mark at current cursor position with name =a=.
   - =`a= jump to mark =a=.
   - =X'a= execute command =X= from current position to mark =a=.

** Macros
   - Press *q* to start record, followed by a lowercase character (or number) to name the macro;
   - Editing action will be recorded;
   - Press *q* again to stop recording;
   - Press <repetition>@<macro name> to apply the macro.

* Windows and Buffers
** multiple windows
   - [:split filename] split window and load another file
   - [:vsplit filename] vertical split
   - [:only] keep only this window open
   - [:hide] hide current window
   - [ctrl-w_] maximize current window
   - [ctrl-w=] make size of all windows equal
   - [ctrl-w ctrl-w] move cursor to another window
   - [ctrl-w L] move current window to far right
   - [ctrl-w H] move current window to far left
   - [ctrl-w J] move current window to very bottom
   - [ctrl-w K] move current window to very top
   - [:qa] quit from all windows

   To always enable status line, put =set laststatus=2= in =~/.vimrc=.
   See =:help laststatus= for more information.

** buffers
   To get list of buffers, try =:buffers= or =:ls= or =:files=.

   To switch buffer by name, try =:buffer <filename>= or =:buf <filename>= or even =:b <filename>=

   To close a buffer, try =:bd= or =:bw=.

* Programming
** tags
  To generate tags file for VIM
#+begin_src sh
ctags --recurse
#+end_src

  Some C++ code declares =class= like this
#+begin_src c++
class MANAGED MyClass {
  ...;
};
#+end_src
  or like this
#+begin_src c++
struct MANAGED MyStruct {
  ...;
};
#+end_src
  To let =ctags= handle it correctly, we'll need regular expressions.
#+begin_src sh
ctags --regex-c++='/(struct|class) +MANAGED +([a-zA-Z][a-zA-Z0-9]*)/\2/'
#+end_src

  Best way of Exuberant Ctags is to use =identifier-list=
#+begin_src sh
ctags -I MANAGED -R
#+end_src

  Some C++ code are more confusing like this one
#+begin_src c++
  class PACKED(4) MyClass FINAL {
    ...;
  }
#+end_src

  Use =identifier-list= as
#+begin_src sh
ctags -I PACKED+,FINAL -R
#+end_src

  Following command will start vi and put cursor in where the 'tag' is.
#+begin_src sh
  vi -t `tag-you-want-to-search'
#+end_src
  Or, you can also find a 'tag' in vi.
#+begin_src sh
  :ta `tag-you-want-to-search'
#+end_src

  When there are multiple locations found
#+begin_src sh
:ts(elect) `tag-you-want'
#+end_src

  Useful key bindings

| *Ctrl-]* | Find tag under the cursor.                      |
| *Ctrl-t* | Return to previous location before jump to tag. |

For more information, see =:help tags=.

** Folding setting
  - automatically folding functions
#+begin_src sh
:set foldmethod=syntax
#+end_src
  - open/close a fold block
    - *z c* fold a block
    - *z C* fold every possible block
    - *z o* open a folder, without sub-folders
    - *z O* open all sub-folders
  - more information
#+begin_src sh
:help folding
#+end_src

** HEX mode
  Vim does not have a hex mode, use xxd can stream file into hex.
  - enter hex mode
#+begin_src sh
:%!xxd
#+end_src
  - exit hex mode
#+begin_src sh
:%!xxd -r
#+end_src
  So this method will change the file, you can always press =u= to recover.

** cscope
*** Generate cscope ref file
#+begin_src sh
cscope -Rb
#+end_src
*** Use cscope ref file in vim
#+begin_src sh
:cs add cscope.out
#+end_src

*** Keybindings
    Example of keybindings in  =~/.vimrc=
#+begin_src
  " cscope settings
  if has("cscope")
      " use both cscope and ctag for 'ctrl-]', ':ta', and 'vim -t'
      set cscopetag

      " check cscope for definition of a symbol before checking ctags: set to 1
      " if you want the reverse search order.
      set csto=0

      " add any cscope database in current directory
      if filereadable("cscope.out")
          cs add cscope.out
      " else add the database pointed to by environment variable
      elseif $CSCOPE_DB != ""
          cs add $CSCOPE_DB
      endif

      " show msg when any other cscope db added
      set cscopeverbose

      """"""""""""" My cscope/vim key mappings
      "
      " The following maps all invoke one of the following cscope search types:
      "
      "   's'   symbol: find all references to the token under cursor
      "   'g'   global: find global definition(s) of the token under cursor
      "   'c'   calls:  find all calls to the function name under cursor
      "   't'   text:   find all instances of the text under cursor
      "   'e'   egrep:  egrep search for the word under cursor
      "   'f'   file:   open the filename under cursor
      "   'i'   includes: find files that include the filename under cursor
      "   'd'   called: find functions that function under cursor calls
      "
      " Below are three sets of the maps: one set that just jumps to your
      " search result, one that splits the existing vim window horizontally and
      " diplays your search result in the new window, and one that does the same
      " thing, but does a vertical split instead (vim 6 only).
      "
      " I've used CTRL-\ and CTRL-@ as the starting keys for these maps, as it's
      " unlikely that you need their default mappings (CTRL-\'s default use is
      " as part of CTRL-\ CTRL-N typemap, which basically just does the same
      " thing as hitting 'escape': CTRL-@ doesn't seem to have any default use).
      " If you don't like using 'CTRL-@' or CTRL-\, , you can change some or all
      " of these maps to use other keys.  One likely candidate is 'CTRL-_'
      " (which also maps to CTRL-/, which is easier to type).  By default it is
      " used to switch between Hebrew and English keyboard mode.
      "
      " All of the maps involving the <cfile> macro use '^<cfile>$': this is so
      " that searches over '#include <time.h>" return only references to
      " 'time.h', and not 'sys/time.h', etc. (by default cscope will return all
      " files that contain 'time.h' as part of their name).


      " To do the first type of search, hit 'CTRL-\', followed by one of the
      " cscope search types above (s,g,c,t,e,f,i,d).  The result of your cscope
      " search will be displayed in the current window.  You can use CTRL-T to
      " go back to where you were before the search.
      "

      nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>
      nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>
      nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>
      nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>
      nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>
      nmap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
      nmap <C-\>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
      nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>


      " Using 'CTRL-spacebar' (intepreted as CTRL-@ by vim) then a search type
      " makes the vim window split horizontally, with search result displayed in
      " the new window.
      "
      " (Note: earlier versions of vim may not have the :scs command, but it
      " can be simulated roughly via:
      "    nmap <C-@>s <C-W><C-S> :cs find s <C-R>=expand("<cword>")<CR><CR>

      nmap <C-@>s :scs find s <C-R>=expand("<cword>")<CR><CR>
      nmap <C-@>g :scs find g <C-R>=expand("<cword>")<CR><CR>
      nmap <C-@>c :scs find c <C-R>=expand("<cword>")<CR><CR>
      nmap <C-@>t :scs find t <C-R>=expand("<cword>")<CR><CR>
      nmap <C-@>e :scs find e <C-R>=expand("<cword>")<CR><CR>
      nmap <C-@>f :scs find f <C-R>=expand("<cfile>")<CR><CR>
      nmap <C-@>i :scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
      nmap <C-@>d :scs find d <C-R>=expand("<cword>")<CR><CR>


      " Hitting CTRL-space *twice* before the search type does a vertical
      " split instead of a horizontal one (vim 6 and up only)
      "
      " (Note: you may wish to put a 'set splitright' in your .vimrc
      " if you prefer the new window on the right instead of the left

      nmap <C-@><C-@>s :vert scs find s <C-R>=expand("<cword>")<CR><CR>
      nmap <C-@><C-@>g :vert scs find g <C-R>=expand("<cword>")<CR><CR>
      nmap <C-@><C-@>c :vert scs find c <C-R>=expand("<cword>")<CR><CR>
      nmap <C-@><C-@>t :vert scs find t <C-R>=expand("<cword>")<CR><CR>
      nmap <C-@><C-@>e :vert scs find e <C-R>=expand("<cword>")<CR><CR>
      nmap <C-@><C-@>f :vert scs find f <C-R>=expand("<cfile>")<CR><CR>
      nmap <C-@><C-@>i :vert scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
      nmap <C-@><C-@>d :vert scs find d <C-R>=expand("<cword>")<CR><CR>


      """"""""""""" key map timeouts
      "
      " By default Vim will only wait 1 second for each keystroke in a mapping.
      " You may find that too short with the above typemaps.  If so, you should
      " either turn off mapping timeouts via 'notimeout'.
      "
      "set notimeout
      "
      " Or, you can keep timeouts, by uncommenting the timeoutlen line below,
      " with your own personal favorite value (in milliseconds):
      "
      "set timeoutlen=4000
      "
      " Either way, since mapping timeout settings by default also set the
      " timeouts for multicharacter 'keys codes' (like <F1>), you should also
      " set ttimeout and ttimeoutlen: otherwise, you will experience strange
      " delays as vim waits for a keystroke after you hit ESC (it will be
      " waiting to see if the ESC is actually part of a key code like <F1>).
      "
      "set ttimeout
      "
      " personally, I find a tenth of a second to work well for key code
      " timeouts. If you experience problems and have a slow terminal or network
      " connection, set it higher.  If you don't set ttimeoutlen, the value for
      " timeoutlent (default: 1000 = 1 second, which is sluggish) is used.
      "
      "set ttimeoutlen=100

  endif

#+end_src

*** Scenarios

    - Find who includes current file
      Register =%= contains the name of current file,
      while register =#= contains the name of the alternate file.
#+begin_src sh
  :cs find i %:t
#+end_src

    - Find who calls current function
      Note that pressing =Ctrl-R= then =Ctrl-W= to put word under cursor.
#+begin_src sh
  :cs find c <Ctrl-R><Ctrl-W>
#+end_src


** Fix Annoying Indentation while Pasting Code
#+begin_src sh
set paste
#+end_src

** Debugging
#+begin_src sh
:packadd termdebug
:Termdebug
#+end_src

* History of Vim
  [[https://twobithistory.org/2018/08/05/where-vim-came-from.html][Twobithistory]] has an article about history of Vim.

[fn:1] http://vim.wikia.com/wiki/Remove_unwanted_spaces
[fn:2] http://vim.wikia.com/wiki/Using_marks
